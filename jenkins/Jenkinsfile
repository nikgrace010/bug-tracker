pipeline {
    agent any

    stages {
        stage('Unit tests - backend') {
            agent {
                docker {
                    image 'snakee/golang-junit:1.21'
                    reuseNode true
                }
            }
            steps {
                echo '===== START: Backend Unit Tests ====='
                dir('bugtracker-backend') {
                    sh '''
                        # Set Go cache to a writable location
                        export GOCACHE="$PWD/.cache/go-build"
                        export GOMODCACHE="$PWD/.cache/go-mod"

                        # Create cache directories
                        mkdir -p "$GOCACHE" "$GOMODCACHE"

                        # Run the tests
                        go test -v ./...
                    '''
                }
                echo '===== END: Backend Unit Tests ====='
            }
        }

        stage('Unit tests - frontend') {
            agent {
                docker {
                    image 'node:20-alpine'
                    reuseNode true
                }
            }
            steps {
                echo '===== START: Frontend Unit Tests ====='
                dir('bugtracker-frontend') {
                    sh '''
                        # Clean up node_modules and lockfile to avoid architecture mismatch
                        rm -rf node_modules package-lock.json .next .cache

                        # Install dependencies for the correct architecture
                        npm install

                        # Optionally, force install SWC binaries for ARM64
                        npm install -D @next/swc-linux-arm64-gnu @next/swc-linux-arm64-musl || true

                        # Run tests
                        npm test
                    '''
                }
                echo '===== END: Frontend Unit Tests ====='
            }
            post {
                always{
                    junit 'bugtracker-frontend/test-results.xml'
                }
            }
        }
    }
}
