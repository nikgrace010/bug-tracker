pipeline {
    agent any

    stages {
        stage('Execute Unit tests') {
            parallel {
                stage('Unit tests - backend') {
                    agent {
                        docker {
                            image 'snakee/golang-junit:1.21'
                            reuseNode true
                        }
                    }
                    steps {
                        echo '===== START: Backend Unit Tests ====='
                        dir('bugtracker-backend') {
                            sh '''
                                export GOCACHE="$PWD/.cache/go-build"
                                export GOMODCACHE="$PWD/.cache/go-mod"
                                mkdir -p "$GOCACHE" "$GOMODCACHE"
                                go test -v ./... 2>&1 | go-junit-report > backend-test-results.xml
                                go test -coverprofile=coverage.out -covermode=atomic ./...
                                go tool cover -html=coverage.out -o coverage.html
                                mkdir -p reports
                                mv -f coverage.html reports/
                            '''
                        }
                        echo '===== END: Backend Unit Tests ====='
                    }
                    post {
                        always {
                            junit 'bugtracker-backend/backend-test-results.xml'
                            publishHTML target: [
                                reportDir: 'bugtracker-backend/reports',
                                reportFiles: 'coverage.html',
                                reportName: 'Backend Coverage Report'
                            ]
                        }
                    }
                }

                stage('Unit tests - frontend') {
                    agent {
                        docker {
                            image 'node:20-bullseye'
                            reuseNode true
                        }
                    }
                    steps {
                        echo '===== START: Frontend Unit Tests ====='
                        dir('bugtracker-frontend') {
                            sh '''
                                rm -rf node_modules package-lock.json .next .cache
                                npm install
                                npm test -- --reporters=jest-junit --outputFile=test-results.xml || true
                                mkdir -p reports
                                mv -f coverage reports/
                            '''
                        }
                        echo '===== END: Frontend Unit Tests ====='
                    }
                    post {
                        always {
                            junit 'bugtracker-frontend/test-results.xml'
                            publishHTML target: [
                                reportDir: 'bugtracker-frontend/reports/coverage',
                                reportFiles: 'index.html',
                                reportName: 'Frontend Coverage Report'
                            ]
                        }
                    }
                }
            }
        }

        stage('Launch Application') {
            agent {
                docker {
                    image 'docker:27.5.1'
                    reuseNode true
                    args '-v /var/run/docker.sock:/var/run/docker.sock -u 0'
                }
            }
            steps {
                echo '===== START: Launch Application step ====='
                sh 'docker compose up --build -d'
            }
        }

        stage('API Tests') {
            agent {
                docker {
                    image 'mcr.microsoft.com/playwright:v1.50.0-jammy'
                    reuseNode true
                    args '-u 0 --network=host'
                }
            }
            steps {
                echo '===== START: API Tests ====='
                dir('tests-api') {
                    sh 'npx wait-port http://localhost:8080/api/health -t 30000'
                    sh 'npm ci'
                    sh 'npx playwright test'
                }
                echo '===== END: API Tests ====='
            }
            post {
                always {
                    junit 'tests-api/test-results/results.xml'
                    publishHTML target: [
                        reportDir: 'tests-api/playwright-report',
                        reportFiles: 'index.html',
                        reportName: 'Playwright API Test Report'
                    ]
                }
            }
        }

        stage('E2E Tests') {
            agent {
                docker {
                    image 'mcr.microsoft.com/playwright:v1.50.0-jammy'
                    reuseNode true
                    args '-u 0 --network=host'
                }
            }
            steps {
                echo '===== START: E2E Tests ====='
                dir('tests-e2e') {
                    sh 'npm ci'
                    sh 'npx playwright test'
                }
                echo '===== END: E2E Tests ====='
            }
            post {
                    always {
                        junit 'tests-e2e/test-results/results.xml'
                            publishHTML target: [
                                reportDir: 'tests-e2e/playwright-report',
                                reportFiles: 'index.html',
                                reportName: 'Playwright E2E Test Report'
                            ]
                        }
                }
        }
    stage('Performance Tests'){
        agent{
            docker{
                image 'grafana/k6:latest'
                reuseNode true
                args '--network=host -u root --entrypoiny=""'
            }
        }
        steps{
            echo '===== START: Performance Tests ====='
            dir('tests-perf'){
                sh 'k6 run script.js'
            }
            echo '===== END: Performance Tests ====='
        }
    }
    post 
                    always {
                            publishHTML target: [
                                reportDir: 'tests-perf',
                                reportFiles: 'perf-results.html',
                                reportName: 'Performance Test Results Report'
                            ]
                        }
                }
    
    }

    post {
        always {
            cleanWs()
        }
    }
}
